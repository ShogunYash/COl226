/* Basic token test */
-1
1-1
a := 5;
b := 3.14;
bool_var := true;
Print(a);
Input("data.txt");
Print("");
Print(data);
Input(data);
if a = b then c := a else c := b;

// Test all operators
int_add := 5 + 3;
float_add := 5.0 +. 3.0;
int_sub := 5 - 3;
float_sub := 5.0 -. 3.0;
int_mult := 5 * 3;
float_mult := 5.0 *. 3.0;
int_div := 5 / 3;
float_div := 5.0 /. 3.0;
modulo := 5 mod 3;
float_mod := 5.0 mod_float 3.0;
abs_val := abs(-5);

// Test comparison operators
eq_test := 5 == 3;
neq_test := 5 ~= 3;
lt_test := 5 < 3;
gt_test := 5 > 3;
leq_test := 5 <= 3;
geq_test := 5 >= 3;

// Test logical operators
and_test := true && false;
or_test := true || false;
not_test := ~true;

/* Integer Vector Tests */
// Empty vector
0
[]

// 1D vector
1
[5]

// 2D vector
2
[3, 4]

// 3D vector
3
[1, 2, 3]

// 5D vector
5
[10, 20, 30, 40, 50]

/* Float Vector Tests */
// 2D float vector
2
[3.14, 2.71]

// 3D float vector with scientific notation
3
[1.0e6, 2.5e-3, 3.33]

/* Integer Matrix Tests */
// Empty matrix
0,0
[[]]

// 1x1 matrix
1,1
[[5]]

// 2x2 matrix
2,2
[[1, 2], [3, 4]]

// 2x3 matrix
2,3
[[1, 2, 3], [4, 5, 6]]

// 3x2 matrix
3,2
[[1, 2], [3, 4], [5, 6]]

/* Float Matrix Tests */
// 2x2 float matrix
2,2
[[1.1, 2.2], [3.3, 4.4]]

// Matrix with scientific notation
2,2
[[1.0e3, 2.0e3], [3.0e3, 4.0e3]]

/* Special constant tests */
max_val := INT_MAX;
min_val := INT_MIN;
tiny_val := epsilon;

// Operations with special constants
big_calc := INT_MAX - 10;
small_calc := INT_MIN + 5;
approx_test := abs(1.0 -. 0.9999) < epsilon;

/* Vector operations */
// Define vectors with dimensions

v1 := 
3
[1, 2, 3];

v2 := 
3
[4, 5, 6];

// Vector addition
3
v_sum := v1 + v2;  // Should be [5, 7, 9]

// Vector dot product
dot_prod := v1 * v2;  // Should be 32

// Vector magnitude
mag_v1 := mag(v1);  // Should be sqrt(14)

/* Matrix operations */
// Define matrices with dimensions

m1 := 
2, 2
[[1, 2], [3, 4]];

m2 := 
2,2
[[5, 6], [7, 8]];

// Matrix addition
(2, 2)
m_sum := m1 + m2;  // Should be [[6, 8], [10, 12]]

// Matrix multiplication
(2, 2)
m_prod := m1 * m2;  // Should be [[19, 22], [43, 50]]

// Matrix transpose
(2, 2); 
m_trans := m1';  // Should be [[1, 3], [2, 4]]

// Matrix determinant
det_m1 := det(m1);  // Should be -2

/* Dimension mismatch tests */
// Vector dimension mismatch
4  // Declares vector with 4 elements
v_mismatch := 
4
[1, 2, 3];  // But only provides 3 - should error

// Matrix dimension mismatch
// Declares 3x2 matrix
m_mismatch := 
3,2
[[1, 2], [3, 4]];  // But only provides 2 rows - should error

// Matrix row length mismatch
(2,3 ) // Declares 2x3 matrix
m_row_mismatch := 
2,3
[[1, 2, 3], [4, 5]];  // Second row too short - should error

/* Control flow tests */
// If-then-else
if x > 0 then {
    y := x * 2;
} else {
    y := x * -1;
}

// For loop
for i := 1 to 10 do {
    sum := sum + i;
}

// While loop with vector dimension
v := 
3
[10, 20, 30];

while dim(v) > 0 do {
    Print(v[0]);
    // Some operation that would reduce v's dimension
}

// Single line comment test
a := 5; // End-of-line comment

/* Multi-line
   comment test
   with multiple lines */
   
b := 10;

/* Nested /* comment */ test */
c := 15;

/* Edge cases */
// Very large integers
big_int := 1234567890;

// Very large float with scientific notation
big_float := 1.234567890e+38;

// Very small float with scientific notation
small_float := 1.234567890e-38;

// Mixed vector types (assuming lexer should detect this)
mixed_vector := 
3
[1, 2.5, 3];

// Improper token sequences
bad_syntax := 5 + * 3;

// Unterminated string
unterminated := "This string has no end";

// Unterminated comment
/* This comment isn't closed */

/* Complete program test */
// Program to compute matrix inverse determinant
A := 
2, 2 
[[4, 7], [2, 6]];

det_A := det(A);

if det_A = 0 then {
    Print("Matrix is singular");
} else {
    result := 1 / det_A;
    Print("Inverse determinant:");
    Print(result);
}

// Vector processing
v := 
5
[10, 20, 30, 40, 50];
sum := 0;

for i := 0 to 4 do {
    sum := sum + v[i];
}

average := sum / 5;
Print("Average of vector elements:");
Print(average);

// Test epsilon for floating-point comparison
if abs(average - 30.0) < epsilon then {
    Print("Average is approximately 30");
}

// Test file for type checker with variable re-declaration prevention
// and proper loop iterator scoping

// Variable declarations
let x := 10;
let y := 3.14;
let z := true;

// This should cause a type error - variable already declared
// x := 20;

// Loop iterator variables
for i := 1 to 10 do {
  tmp := i * 2;
  Print(tmp);
}

// This should work - i from the loop is no longer in scope
i := "Hello";
Print(i);

// Nested loops with same iterator name (should work)
for i := 1 to 5 do {
  for i := 1 to 3 do {
    Print("Inner loop");
  }
  Print("Outer loop");
}

// Using a variable with the same name as a loop iterator
// This would cause an error if uncommented
// for y := 1 to 10 do {
//   Print(y);
// }

// This would be fine since the iterator is gone after the loop
y := y +. 1.0;
Print(y);